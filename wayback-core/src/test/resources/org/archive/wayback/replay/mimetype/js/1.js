//global variable used for SHOP upload functionality
var myView = null;
var agentBrokerSAMLToken=null;
var postCCRApplicantIDToken=null;
var postCCRAppIDToken=null;
var postCCRState=null;
var agentEmailUUID =null;

$(function($) {



var tenantId = 'global';
var locale = 'en_US';
var resources = {};
 
 
 var loggingEnabled =false;
 
var environment = '';

var envReference = 'Production';


var spanishEnabled = 'true';



	resources['ffe.ee.shared.validation.required'] = '0 is required.';
	resources['ffe.ee.shared.dropdown.relation.january'] = 'January';
	resources['ffe.ee.shared.validation.eePatternRequired'] = 'Enter a valid value for 0.';
	resources['ffe.ee.shared.learnMore'] = 'Learn More';

var oamServer = 'https://eidm.cms.gov/oam/server/authentication?type=english'; 
var oamSpanishServer = 'https://eidm.cms.gov/oam/server/authentication?type=spanish'; 
var oamSuccessURL = 'https://eidm.cms.gov/successffmeng.html';
var oamSpanishSuccessURL = 'https://eidm.cms.gov/successffmesp.html';
var oamLogoutURL = 'https://eidm.cms.gov/oam/server/logout?end_url=https://www.healthcare.gov/marketplace/global/en_US/registration';
var oamSpanishLogoutURL = 'https://eidm.cms.gov/oam/server/logout?end_url= https://www.cuidadodesalud.gov/marketplace/global/es_MX/registration';




//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBmodel.js.vsl in andromda-backbone-js-ui cartridge.
//

// Create the RegistrationBBModel Model
var Registration_RegistrationBBModel = FFEModel.extend({

    // Each Backbone Model that is not a part of a Backbone collection requires
	// a reference to a REST URL that *follows the Backbone/REST conventions*
	urlRoot : "../ee-rest/tenantId/locale/IssuerParentNOI/TODO",

	// If the Backbone Model's associated VO does not have an identifier field called
	// "id", specify the identifier field using the idAttribute property. This will be
	// use to generate the REST URL called for save and delete.
	idAttribute : "id"

});

var registrationRegistrationBBModel = new Registration_RegistrationBBModel();
//provides support for some Individual application specific Validation
//index is for the indexed fields.
var CommonValidationBBModel = FFEModel.extend(
{
	sync : Backbone._sync,
	defaults : {},
	resourceBundle : resources, //name of the resource bundle 
	namespace : "ffe.ee", //which package we are using
	index : null, //for indexed properties, change to NOT null if  used
	constructor : function(attributes) 
	{
		this.preservedValidate = _.clone(this.validate);
		Backbone.Model.prototype.constructor.call(this, attributes);
		this.bind("showCommonErrorMessage", showCommonErrorMessage);
	}
});

var commonBBValidationModel = new CommonValidationBBModel();
FFM.resources = resources; var IsDirectEnrollmentConsumerBBModel = CommonValidationBBModel.extend({

    defaults: {},

    url: environment + "/ee-rest/" + tenantId + "/" + locale + "/DirectEnrollment/isDirectEnrollmentConsumer",
    urlRoot: environment + "/ee-rest/" + tenantId + "/" + locale + "/DirectEnrollment/isDirectEnrollmentConsumer",
    //idAttribute : "userName",
    resources: resources,
    role: null
});
var isDirectEnrollmentConsumerBBModel = new IsDirectEnrollmentConsumerBBModel();var sendSecureRedirectBBModel = CommonValidationBBModel.extend({

	pageName:"indApp",
	defaults : { },
	 
	url : environment+"/ee-rest/"+tenantId+"/" +locale +"/DirectEnrollment/sendSecureRedirect",
	urlRoot: environment+"/ee-rest/"+tenantId+"/" +locale +"/DirectEnrollment/sendSecureRedirect",
	//idAttribute : "userName",
	resources : resources,
	role : null
}); 
var sendSecureRedirectBBModel = new sendSecureRedirectBBModel();var getSecureRedirectInfoBBModel = CommonValidationBBModel.extend({

	defaults : { },
	 
	url : environment+"/ee-rest/"+tenantId+"/" +locale +"/DirectEnrollment/getSecureRedirectInfo",
	urlRoot: environment+"/ee-rest/"+tenantId+"/" +locale +"/DirectEnrollment/getSecureRedirectInfo",
	//idAttribute : "userName",
	resources : resources,
	role : null
}); 
var getSecureRedirectInfoBBModel = new getSecureRedirectInfoBBModel();var CreatePersonMappingBBModel = CommonValidationBBModel.extend({

	defaults : { },
	 
	url : environment+"/ee-rest/"+tenantId+"/" +locale +"/DirectEnrollment/createPersonMapping",
	urlRoot: environment+"/ee-rest/"+tenantId+"/" +locale +"/DirectEnrollment/createPersonMapping",
	//idAttribute : "userName",
	resources : resources,
	role : null
}); 
var createPersonMappingBBModel = new CreatePersonMappingBBModel();
var registrationEIDMIntegration_createLiteEIDMAccountBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/createLiteEIDMAccount",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/createLiteEIDMAccount",
	idAttribute : "exchangeUserIdentifier",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationCreateLiteEIDMAccountBBModel = new registrationEIDMIntegration_createLiteEIDMAccountBBModel(initializeEIDMIntegrationCreateLiteEIDMModel());
var registrationEIDMIntegration_fetchSecurityQuestionsEIDMAccountBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/fetchAllSecurityQuestions/ffm",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/fetchAllSecurityQuestions/ffm",
	idAttribute : "userName",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationFetchSecurityQuestionsEIDMAccountBBModel = new registrationEIDMIntegration_fetchSecurityQuestionsEIDMAccountBBModel();
var registrationEIDMIntegration_fetchValidationRulesEIDMAccountBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/fetchEIDMValidations/ffm",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/fetchEIDMValidations/ffm",
	idAttribute : "userName",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationFetchValidationRulesEIDMAccountBBModel = new registrationEIDMIntegration_fetchValidationRulesEIDMAccountBBModel();
var registrationEIDMIntegration_UpdateEmailEIDMAccountBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateEmail",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateEmail",
	idAttribute : "userName",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationUpdateEmailEIDMAccountBBModel = new registrationEIDMIntegration_UpdateEmailEIDMAccountBBModel(initializeEIDMEmail());
var registrationEIDMIntegration_updateExpiredPasswordBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateExpiredPassword",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateExpiredPassword",
	idAttribute : "userName",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationUpdateExpiredPasswordBBModel = new registrationEIDMIntegration_updateExpiredPasswordBBModel(initializeEIDMIntegrationUpdateExpiredPasswordModel());
var registrationEIDMIntegration_updateForgottenUserNameBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	//url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateForgottenUserName",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateForgottenUserName",
	//idAttribute : "userLevel",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationUpdateForgottenUserNameBBModel = new registrationEIDMIntegration_updateForgottenUserNameBBModel(initializeEIDMIntegrationUpdateForgottenUserNameModel());
var registrationEIDMIntegration_updatePasswordBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updatePassword",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updatePassword",
	idAttribute : "userName",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationUpdatePasswordBBModel = new registrationEIDMIntegration_updatePasswordBBModel(initializeEIDMIntegrationUpdatePasswordModel());
var registrationEIDMIntegration_updatePhoneNumberBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	//url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updatePhoneNumber",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updatePhoneNumber",
	idAttribute : "userName",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationUpdatePhoneNumberBBModel = new registrationEIDMIntegration_updatePhoneNumberBBModel(initializeEIDMIntegrationUpdatePhoneNumberModel());
var registrationEIDMIntegration_UpdateSecurityQuestionsEIDMAccountBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateSecurityQuestions",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateSecurityQuestions",
	idAttribute : "exchangeUserIdentifier",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationUpdateSecurityQuestionsEIDMAccountBBModel = new registrationEIDMIntegration_UpdateSecurityQuestionsEIDMAccountBBModel(updateEIDMSecurityQuestions());
var registrationEIDMIntegration_verifyEmailAddressEIDMAccountBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/verifyEmailAddress/ffm",
	urlRoot: environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/verifyEmailAddress/ffm",
	idAttribute : "exchangeUserIdentifier",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationVerifyEmailAddressEIDMAccountBBModel = new registrationEIDMIntegration_verifyEmailAddressEIDMAccountBBModel(initializeEIDMIntegrationverifyEmailAddressEIDMModel());
var registrationEIDMIntegration_forgottenPasswordSetupBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/forgottenPasswordSetup",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationForgottenPasswordSetupBBModel = new registrationEIDMIntegration_forgottenPasswordSetupBBModel();
var registrationEIDMIntegration_forgottenPasswordQuestionsBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/forgottenPasswordQuestions",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationForgottenPasswordQuestionsBBModel = new registrationEIDMIntegration_forgottenPasswordQuestionsBBModel();
var registrationEIDMIntegration_forgottenPasswordConfirmBBModel = CommonValidationBBModel.extend({

	pageName:"myAccount",
	defaults : { },
	 
	url : environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/forgottenPasswordConfirm",
	resources : resources,
	role : null
}); 
var registrationEIDMIntegrationForgottenPasswordConfirmBBModel = new registrationEIDMIntegration_forgottenPasswordConfirmBBModel(initializeEIDMIntegrationForgottenPasswordConfirmModel());


var AgentBrokerBBView=FFEView.extend({el:$("#agentBrokerSubNav"),model:(typeof(individualApplicationApplicationBBModel)!=="undefined"&&!isEmpty(individualApplicationApplicationBBModel)?individualApplicationApplicationBBModel:null),isDirectEnrollmentConsumerModel:isDirectEnrollmentConsumerBBModel,getSecureRedirectInfoModel:getSecureRedirectInfoBBModel,sendSecureRedirectModel:sendSecureRedirectBBModel,createPersonMappingModel:createPersonMappingBBModel,theUrl:"",qhpEligible:null,resources:resources,initialize:function(){_.bindAll(this,"render","refreshTemplate","fetchIsDirectEnrollmentConsumer","sendSecureRedirect","getSecureRedirectInfo","createPersonMappingForDirectEnrollment");
this.render()
},events:{"click #backToPortalLink":"createPersonMappingForDirectEnrollment"},render:function(){this.refreshTemplate()
},refreshTemplate:function(){},fetchIsDirectEnrollmentConsumer:function(){var a=this;
this.isDirectEnrollmentConsumerModel.fetch({success:function(c,b){a.isDirectEnrollment=true;
if(b===true){console.log("direct enrollment");
$("#agentBrokerSubNav").show();
$("#agentBrokerStateBar").show()
}else{console.log("not direct enrollment");
$("#agentBrokerSubNav").hide();
$("#agentBrokerStateBar").hide()
}},error:function(c,b){a.isDirectEnrollment=false;
console.log("Is direct enrollment consumer service has failed! Setting isDirectEnrollment variable to false.");
$("#agentBrokerSubNav").hide();
$("#agentBrokerStateBar").hide()
}})
},createPersonMappingForDirectEnrollment:function(){var c=this;
var b=(!isEmpty(this.model)?this.model.get("identifier"):(!isEmpty(window.myAccountAppID)?window.myAccountAppID:""));
var a=new CreatePersonMappingBBModel();
if(!isEmpty(this.model)||!isEmpty(window.myAccountAppID)){a.url=a.urlRoot+"?applicationId="+b
}a.save(null,{success:function(e,d){c.sendSecureRedirect()
},error:function(e,d){remoteTracker.directEnrollment.track("DE-IR",{success:"no"})
}})
},sendSecureRedirect:function(){var a=this;
this.sendSecureRedirectModel.fetch({dataType:"text",success:function(c,b){if(!isEmpty(b)){a.getSecureRedirectInfo(b)
}else{remoteTracker.directEnrollment.track("DE-IR",{success:"no"})
}},error:function(c,b){remoteTracker.directEnrollment.track("DE-IR",{success:"no"})
}})
},getSecureRedirectInfo:function(a){var b=this;
this.getSecureRedirectInfoModel.fetch({success:function(e,d){var f=function(h){var g=(d)?d["Transfer Type"]:null;
remoteTracker.directEnrollment.track("DE-IR",{success:"yes",transferType:g},function(){var i=b.theUrl=d["Return URL"];
var j="<form name='redirectToPartnerForm' id='redirectToPartnerForm'  method='post'>";
j+="<input type='hidden' name='SAMLResponse' value='"+a+"'/>";
j+="</form>";
$("body").append(j);
document.forms.redirectToPartnerForm.action=i;
document.forms.redirectToPartnerForm.submit()
})
};
var c=determineLocale();
if(c!=="en_US"&&c!=="es_MX"){c="en_US"
}deleteJSessionIDCookies(c,"","",f)
},error:function(d,c){remoteTracker.directEnrollment.track("DE-IR",{success:"no"})
}})
}});
var agentBrokerBBView=new AgentBrokerBBView();//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_LoginBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : "#logInPage",

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	basicValidationRulesModel : registrationEIDMIntegrationFetchValidationRulesEIDMAccountBBModel,
	
	isDirectEnrollmentConsumerModel : isDirectEnrollmentConsumerBBModel,
	
	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	logInTemplate : _.template($('#logInTemplate').html()),
	//logInSignUpTemplate : _.template($('#logInSignUpTemplate').html()),

	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		this.model.bind('refreshLogInTemplates', this.render, this);
		
		this.fetchInitialFetch();
		this.render();

		FFM.initEIDMValidationRules(this.resources);
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click #logInPageSignInButton" : "signIn",
		"click #loginSignUpButton" : "goToSignUp",
		"click #alertTextSignUp" : "goToSignUp",
		"click #forgotPasswordLink" : "forgotPasswordLink",
		"click #forgotUsernameLink" : "forgotUsernameLink",
		"click #loginSubmit" : "submitForm"
	},
	
	fetchInitialFetch : function() {
	    var $this = this;
	    if (window.registrationInitialSessionCallsComplete) {
	            $this.fetchBasicValidationRules();
	    } else {
	            setTimeout(function () {
	                $this.fetchInitialFetch();
	            }, 100);
	    }
	},

	renderMobileWarning: function()
	{
		var template = _.template($('#logInMobileWarning').html()),
		height = $(window).height(),
		html = template({
			tablet: $.browser.tablet,
			fontsize: (height<=800) ? 1 : ($.browser.tablet ? 2 : 3)
		});
		$('<DIV>').html(html).dialog({
			modal: true	,
			width: "80%",
			open: function()
			{
				var me = $(this);
				me.find('.btn-primary').one('click', function() {
					me.dialog('close');
				});

				me.parent().find('.ui-dialog-titlebar').hide();
			}
		});
	},
	
	render : function() {

		this.$el.empty();

		/* artf162104  requested to NOT show mobile message (11/24) 
		 * if ($.browser.mobile)
		{
			this.renderMobileWarning();
		}*/
		
		if(locale.indexOf("es_MX")> -1){
			this.$el.append(this.logInTemplate({
				oamServerURL : oamSpanishServer,
				oamSuccessURL : oamSpanishSuccessURL
				
			}));
		}else{
			this.$el.append(this.logInTemplate({
				oamServerURL : oamServer,
				oamSuccessURL : oamSuccessURL
			}));
		}
		
		this.initializeValidation();
		
		if(locale.indexOf("es_MX")> -1){
			checkDeleteSession(locale, environment, oamSpanishLogoutURL);
		}else{
			checkDeleteSession(locale, environment, oamLogoutURL);
		}
		
		$('input', '#logInPage').customInput();
		inspectOAMErrors(resources);
		
		this.fetchIsDirectEnrollmentConsumer();
		
	},
	
	addValdidationObjectsToFFM : function() {
	},
	
	initializeValidation : function() {
		var eventTrigger = $("#loginSubmit"),
			formContainer = $("#loginSubmitContainer");
			
		if(formContainer.length > 0) {
			FFM.FormValidator.currentLocale = locale;
			var loginValidator = new FFM.FormValidator(formContainer, eventTrigger);
		}
	},
	
	fetchBasicValidationRules : function() {
		var $this = this;
		if(false){ // spare eidm right now
		this.basicValidationRulesModel.fetch({
			success : function(model, response) {
				$this.addValdidationObjectsToFFM();
				/* console.log(model);
				console.log(response); */
			},
			error : function(model, response) {
				/* console.log(model);
				console.log(response); */
			}
		});
		} else {
		 var validations = [{"csrf":null,"regularExpression":"^[a-zA-Z0-9_]*$","fieldName":"Application ID","nullString":""},
		                    {"csrf":null,"regularExpression":"^[a-zA-Z0-9][a-zA-Z0-9'. -]{0,30}$","fieldName":"Out of wallet Answers","nullString":""},
								  {"csrf":null,"regularExpression":"[0-9][0-9][0-9][0-9]","fieldName":"Last Four SSN","nullString":""},
								  {"csrf":null,"regularExpression":"^(?!(000|666))([0-6]\\d{2}|7([0-6]\\d|7[012]))-(?!00)\\d{2}-(?!0000)\\d{4}$","fieldName":"SSN","nullString":""},
								  {"csrf":null,"regularExpression":"","fieldName":"Suffix","nullString":""},
								  {"csrf":null,"regularExpression":"((?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,20})&quot; &amp;&amp; (&quot;.*[=&lt;&gt;()/'&amp;?\\&quot;].*","fieldName":"Password","nullString":""},
								  {"csrf":null,"regularExpression":"/^(?:(0[1-9]|1[012])[\\/.](0[1-9]|[12][0-9]|3[01])[\\/.](19|20)[0-9]{2})$/","fieldName":"Date of Birth","nullString":""},
								  {"csrf":null,"regularExpression":"([a-zA-Z \\\\-'\\\\s]{1,25}){1}","fieldName":"Middle Name","nullString":""},{"csrf":null,"regularExpression":"","fieldName":"User Role","nullString":""},
								  {"csrf":null,"regularExpression":"^[a-zA-Z0-9][a-zA-Z0-9_.@/'-]{5,74}$","fieldName":"User Login","nullString":""},
								  {"csrf":null,"regularExpression":"([a-zA-Z \\\\-'\\\\s]{1,38}){1}","fieldName":"City","nullString":""},
								  {"csrf":null,"regularExpression":"[A-Za-z0-9\\.\\_\\#\\!\\$\\&amp;\\'\\*\\/\\=\\?\\^\\`\\{\\}\\~\\|\\%\\+\\-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}","fieldName":"Email","nullString":""},
								  {"csrf":null,"regularExpression":"[A-Za-z{5,74}]","fieldName":"State","nullString":""},{"csrf":null,"regularExpression":"[\\\\d]{4}","fieldName":"Zip Code Extension","nullString":""},
								  {"csrf":null,"regularExpression":"(^[a-zA-Z0-9._\\\\-,'\\\\s]{1,68}){1}","fieldName":"Address Line 1","nullString":""},
								  {"csrf":null,"regularExpression":"^[a-zA-Z0-9][a-zA-Z0-9_.@/'-]{5,74}$","fieldName":"Admin ID","nullString":""},
								  {"csrf":null,"regularExpression":"(^[a-zA-Z0-9._\\\\-,'\\\\s]{1,68}){1}","fieldName":"Address Line 2","nullString":""},
								  {"csrf":null,"regularExpression":"[\\\\d]{5}","fieldName":"Zip Code","nullString":""},
								  {"csrf":null,"regularExpression":"^[2-9][0-9]{9}","fieldName":"Primary Phone","nullString":""},
								  {"csrf":null,"regularExpression":"([a-zA-Z \\\\-'\\\\s]{1,25}){1}","fieldName":"Last Name","nullString":""},
								  {"csrf":null,"regularExpression":"([a-zA-Z \\\\-'\\\\s]{1,20}){1}","fieldName":"First Name","nullString":""}];

				this.basicValidationRulesModel.set("validations", validations);
//				this.addValdidationObjectsToFFM();
		}
	},
	
	signIn : function() {
		var passwordStatus = "expired";//for testing purposes
		if(passwordStatus === 'expired') {
			router.navigate("expiredPassword", {trigger: true});
			this.model.trigger("refreshExpiredPasswordTemplates");	
		}
		else {
			router.navigate("termsAndConditions", {trigger: true});
			this.model.trigger("refreshLogInTermsAndConditionsTemplates");	
		}
	},
	
	forgotPasswordLink : function() {
		router.navigate("forgotPassword", {trigger: true});
		this.model.trigger("refreshForgotPasswordTemplates");
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#forgotPasswordPage h2').attr('tabindex', '-1').focus();
	},
	
	forgotUsernameLink : function() {
		router.navigate("forgotUsername", {trigger: true});
		this.model.trigger("refreshForgotUsername");
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#forgotUsernameDetails h2').attr('tabindex', '-1').focus();
	},
	
	showAlertText :function() {
		//TODO: add functionality to show alert text after too many tries at log in
	},
	
	goToSignUp : function() {
		router.navigate("signUpStepOne", {trigger: true});
		this.model.trigger("signUpStepOne");
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#registrationSignUpOne h2').attr('tabindex', '-1').focus();
	},
	
	submitForm : function() {
    remoteTracker.track("IA-RG-Login", {}, function() {
		  $('#loginData').submit();
    });
	},
	
	inspectSessionForAgentBroker: function() 
	{
		if(!isEmpty(agentBrokerSAMLToken))
		{
			var userType =getAgentBrokerType();
			
			if(!isEmpty(userType))
			{
				if(isUserAgentBroker(userType))
				{
					var userID=getAgentBrokerUserID();
					if(!isEmpty(userID))
					{
						//show return button AND pre pop the user id
						this.makeAgentBrokerUIChanges(userID);
					}
					else
					{
						//still show the return button
						this.makeDirectEnrollmentUIRelatedChanges();
					}
				}
				else
				{
					//still show the return button
					this.makeDirectEnrollmentUIRelatedChanges();
				}
			}
		}
	},
	makeDirectEnrollmentUIRelatedChanges : function()
	{
		makeDirectEnrollmentUIChanges();
		$('#forgotUserNamePasswordDiv').hide();
		//$('#signUpButton').hide(); pod 6 doesn't want this hidden
	},
	makeAgentBrokerUIChanges : function( userId ) {
		this.makeDirectEnrollmentUIRelatedChanges();
		$('#username').val(userId);
		$('#username').attr('readonly','readonly');
	},
	fetchIsDirectEnrollmentConsumer : function()
	{
	    var $this = this;
       // make sure we don;t try to do this before the saml has been posted
	    if (window.registrationInitialSessionCallsComplete) {
	        if (!isEmpty(agentBrokerSAMLToken)) {
	            $this.inspectSessionForAgentBroker();
	        }
	    } else {
	        setTimeout(function () {
	            $this.fetchIsDirectEnrollmentConsumer();
	        }, 100);
	    }
		
	}
});
var registrationLoginBBView = new Registration_LoginBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_RegistrationBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#registrationSignUp"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	createLiteAccountModel : registrationEIDMIntegrationCreateLiteEIDMAccountBBModel,
	verifyEmailAddressModel : registrationEIDMIntegrationVerifyEmailAddressEIDMAccountBBModel,
	securityQuestionsModel : registrationEIDMIntegrationFetchSecurityQuestionsEIDMAccountBBModel,
	basicValidationRulesModel : registrationEIDMIntegrationFetchValidationRulesEIDMAccountBBModel,

	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	suffixDropDownUSTemplate : _.template($('#suffixDropDownUSTemplate').html()),
	stateDropDownUSTemplateFFM : _.template($('#stateDropDownUSTemplateFFM').html()),
	registrationSignUpOneStepTemplate : _.template($('#registrationSignUpOneStepTemplate').html()),

	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate','createProfile', 'goBackToLogIn', 'setModelInfo',
					'fetchInitialFetches', 'fetchSecurityQuestions', 'initRenderSecurityQuestions',
					'changeSecurityQuestions', 'initializeValidation');
		
		this.model.bind('refreshSignUp', this.refreshTemplate);
				
		// Custom validation handlers could be added here
		this.fetchInitialFetches();

		// Initialize generally completes by calling this.render
		//this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click #signUpCreate" : "createProfile",
		"click .goBackToLogIn" : "goBackToLogIn",
		"change .securityQuestions" : "changeSecurityQuestions"
	},
	
	render : function() {
		this.refreshTemplate();	
	},

   fetchInitialFetches: function () {
      var $this = this;
      if (window.registrationInitialSessionCallsComplete) {
		       $this.fetchSecurityQuestions();
		       //this.fetchBasicValidationRules();
		} else {
             setTimeout(function() {
                $this.fetchInitialFetches();
             }, 100);
      }

	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.$el.empty();
		this.$el.append(this.registrationSignUpOneStepTemplate());
		
		
		$('#registrationSignUpSuffixContainer').empty();
		$('#registrationSignUpSuffixContainer').append(this.suffixDropDownUSTemplate({
			'idToUse' : 'registrationSignUpSuffix',
			'labelToUse' : 'Suffix <span class="noBold">(Optional)</span>',
			'forToUse' : 'registrationSignUpSuffix',
			'isRequired' : false,
			'nameToUse' : null
		}));
		$("#registrationSignUpSuffix")
			.attr('data-validate', 'EIDMSuffix')
			.attr('aria-describedby', 'registrationSignUpSuffix-feedbackMsg');
		
		$('#registrationSignUpStateContainer').empty();
		$('#registrationSignUpStateContainer').append(this.stateDropDownUSTemplateFFM({
			'idToUse' : 'registrationStateSignUp',
			'labelToUse' : 'State You Live In',
			'forToUse' : 'registrationStateSignUp',
			'isRequired' : false,
			'nameToUse' : null
		}));
		$("#registrationStateSignUp")
			.attr('data-validate', 'notBlank EIDMState')
			.attr('aria-describedby', 'registrationSignUpState-feedbackMsg');
				
		$('input').customInput();
		this.initRenderSecurityQuestions();
		this.initializeValidation();
	},
	
	initializeValidation : function() {
		var eventTrigger = $("#signUpCreate"),
			formContainer = $("#registrationValidationSignUp");
		
		if(formContainer.length > 0) {
			var registrationValidator = new FFM.FormValidator(formContainer, eventTrigger);
		}
	},
	
	fetchSecurityQuestions : function() {
		var $this = this;
		
		if(false) { // spare EIDM right now
			 this.securityQuestionsModel.fetch({
				 success : function(model, response) {
					 $this.initRenderSecurityQuestions();
				 },
				 error : function(model, response) {
					 console.log('failure');
				 }
			 });
		} else {
		  var questions = getEIDMSecurityQuestions(locale);
			 this.securityQuestionsModel.set('securityQuestions', questions);
		  $this.initRenderSecurityQuestions();
		}
	},
	
	initRenderSecurityQuestions : function() {
		var securityQs = this.securityQuestionsModel.get('securityQuestions'),
			options = '';
		$('.securityQuestions option', '#registrationSignUp').remove();
		
		//loop through the three inputs
		for(var j = 0; j < 3; j++) {
			options = '';
			options += '<option value="" selected>'+this.resources['ffe.ee.shared.select']+'</option>';
			if(!isEmpty(securityQs)) {
				//loop through all the security questions
				for(var i = 0; i < securityQs.length ; i++) {
					options += '<option value="'+securityQs[i].question+'">'+securityQs[i].question+'</option>';
				}
			}
			$('#registrationSignUpSecurityQ'+j).append(options);
		}
	},
	
	changeSecurityQuestions : function() {
		filterSecurityQuestions(this.securityQuestionsModel, 'registrationSignUp');
	},
	
	createProfile : function() {
		var $this = this,
			errors;
		
		this.setModelInfo();
		
		this.createLiteAccountModel.save(null, {
			success : function(model, response) {
				switch (response.errors[0].errorType) {
					case '200':
						$this.model.trigger('signUpSuccess');
						break;
					case '204':
						//$this.model.trigger('profileAlreadyExists');
						$this.model.trigger('couldNotCreateAccountGeneric');
						break;
					case '500':
						$this.model.trigger('couldNotCreateAccountGeneric');
						break;
					default :
						$this.model.trigger('couldNotCreateAccountGeneric');
						break;
				}
			},
			error : function(model, response) {
				console.log('create lite loa1 account failure');
				$this.model.trigger('couldNotCreateAccountGeneric');
			}
		});
		router.navigate("registrationSignUpResults", {trigger: true});
	},
	
	setModelInfo : function() {
		this.createLiteAccountModel.set({'securityQuestions' : []});
		var questions = this.createLiteAccountModel.get('securityQuestions');
		
		for(var i = 0; i < 3; i++) {
			questions.push(newEIDMSecurityQuestion());
			
			questions[i].question = $.trim($('#registrationSignUpSecurityQ'+i).val());
			questions[i].answer = $.trim($('#registrationSignUpsecurityQ'+i+'Answer').val());
			questions[i].index = i;
		}
		
		this.createLiteAccountModel.set({'firstName' :$.trim( $('#registrationSignUpFirstName').val())});
		this.createLiteAccountModel.set({'middleName' : $.trim($('#registrationSignUpMiddleName').val())});
		this.createLiteAccountModel.set({'lastName' : $.trim($('#registrationSignUpLastName').val())});
		this.createLiteAccountModel.set({'suffix' : $.trim($('#registrationSignUpSuffix').val())});
		this.createLiteAccountModel.set({'email' : $.trim($('#registrationSignUpEmail').val())});
		this.createLiteAccountModel.set({'password' : $.trim($('#registrationSignUpPassword').val())});
		this.createLiteAccountModel.set({'securityQuestions' : questions});
		this.createLiteAccountModel.set({'userName' : $.trim($('#registrationSignUpUsername').val())});
		
		if(this.createLiteAccountModel.attributes.hasOwnProperty('errors')) {
			delete this.createLiteAccountModel.attributes.errors;
		}
	},
	
	verifyEmailAddress : function() {
		var $this = this;
		
		this.verifyEmailAddressModel.set({'username' : this.createLiteAccountModel.get('userName')});
		
		this.verifyEmailAddressModel.save(null, {
			success : function(model, response) {
				console.log('email was verified');
			},
			error : function(model, response) {
				console.log('email was not verfied');
			}
		});
	},
	
	goBackToLogIn : function() {
		this.model.trigger('refreshLogInTemplates');
		router.navigate("logIn", {trigger: true});
	}
});
var registrationRegistrationBBView = new Registration_RegistrationBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_ForgotPasswordDetailsBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#forgotPasswordPage"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	forgottenPasswordSetupModel: registrationEIDMIntegrationForgottenPasswordSetupBBModel,
	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	forgotPasswordTemplate : _.template($('#forgotPasswordTemplate').html()),
	//logInSignUpTemplate : _.template($('#logInSignUpTemplate').html()),

	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate','sendEmail', 'cancel', 'goToSignUp', 'initializeValidation');
		
		this.model.bind('refreshForgotPasswordTemplates', this.refreshTemplate);
		
		// Custom validation handlers could be added here

		// Initialize generally completes by calling this.render
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click #forgotPasswordCancel" : "cancel",
		"click #forgotPasswordSignUpButton" : "goToSignUp",
		"click #forgotPasswordSendEmail" : "sendEmail"
		
	},
	
	render : function() {
		this.refreshTemplate();	
	
	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.$el.empty();
		this.$el.append(this.forgotPasswordTemplate());
		this.initializeValidation();
	},
	
	initializeValidation : function() {
		var eventTrigger = $("#forgotPasswordSendEmail"),
			formContainer = $("#forgotPasswordContainer");
			
		if(formContainer.length > 0) {
			var forgotPasswordValidator = new FFM.FormValidator(formContainer, eventTrigger);
			forgotPasswordValidator.setRule("notBlank", ["^(?!\\s*$).+", this.resources['ffe.ee.shared.validations.notBlank']]);
		}
	},
	
	sendEmail : function() {
		blockUIForProfile();
		var userName = $.trim($('#userNameForgotPassword').val());
		this.forgottenPasswordSetupModel.set("userName", userName);
		this.forgottenPasswordSetupModel.save();
		this.model.trigger('forgotPasswordEmail');
		$.unblockUI();
	},
	
	cancel : function() {
		this.model.trigger("refreshLogInTemplates");
		router.navigate("logIn", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
	},
	
	goToSignUp : function() {
		this.model.trigger("signUpStepOne");
		router.navigate("signUpStepOne", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#registrationSignUpOne h2').attr('tabindex', '-1').focus();
	}
});
var registrationForgotPasswordDetailsBBView = new Registration_ForgotPasswordDetailsBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_ForgotUsernameDetailsBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#forgotUsernameDetails"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	forgotUserNameModel : registrationEIDMIntegrationUpdateForgottenUserNameBBModel,

	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	forgotUsernameDetailsTemplate : _.template($('#forgotUsernameDetailsTemplate').html()),

	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate','forgotUsernameCancel','sendEmail',/*, 'updateUserName','setUpdateUserNameModelInfo',*/ 'initializeValidation');
		this.model.bind('refreshForgotUsername', this.refreshTemplate);
		this.model.bind('registrationFindUsername', this.findUsername);
		
		// Custom validation handlers could be added here

		// Initialize generally completes by calling this.render
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click #signUp" : "signUp",
		//"click #forgotUsernameCancel" : "updateUserName",
		"click #forgotUsernameSendEmail" : "sendEmail",
		"click #forgotUsernameCancel" : "forgotUsernameCancel"
	},
	
	render : function() {
		this.refreshTemplate();
	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.$el.empty();
		this.$el.append(this.forgotUsernameDetailsTemplate());
		this.initializeValidation();
	},
	
	initializeValidation : function() {
		var eventTrigger = $("#forgotUsernameSendEmail"),
			formContainer = $("#forgotUserNameContainer");
		
		if(formContainer.length > 0) {
			FFM.FormValidator.currentLocale = locale;
			var forgotUserNameValidator = new FFM.FormValidator(formContainer, eventTrigger);
		}
	},
	
	signUp : function() {
		this.model.trigger("signUpStepOne");
		router.navigate("signUpStepOne", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#registrationSignUpOne h2').attr('tabindex', '-1').focus();
	},
	
	forgotUsernameCancel : function (){
		this.model.trigger('refreshLogInTemplates');
		router.navigate("logIn", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
	},
	
	sendEmail : function() {
		var $this = this,
			theResponse;
		blockUIForProfile();
		this.setUpdateUserNameModelInfo();
		this.forgotUserNameModel.url =environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateForgottenUserName";
		this.forgotUserNameModel.save(null, {
			success : function(model, response) {
				if(response.errors[0].errorType === 'T100') {
					$this.model.trigger('forgotUsernameEmailT100');
				}
				else {
					$this.model.trigger('forgotUsernameEmail');
				}
			},
			error : function(model, response) {
				try {
					theResponse = $.parseJSON(response.responseText);
					if(theResponse.errors[0].errorType == 'T100') {
						$this.model.trigger('forgotUsernameEmailT100');
					}
					else {
						$this.model.trigger('forgotUsernameEmail');
					}
				}
				catch(e) {
					$this.model.trigger('forgotUsernameEmail');
				}
			}
		});
		$.unblockUI();
	},
	
	setUpdateUserNameModelInfo : function () {
		
		this.forgotUserNameModel.set({'firstName' : $.trim($('#forgotUserNameFirstName').val())});
		this.forgotUserNameModel.set({'lastName' : $.trim($('#forgotUserNameLastName').val())});
		this.forgotUserNameModel.set({'email' : $.trim($('#forgotUserNameEmail').val())});
		
		// removing attributes from the model to be able to call service again
		if(this.forgotUserNameModel.attributes.hasOwnProperty('errors')) {
			delete this.forgotUserNameModel.attributes.errors;
		}
		if(this.forgotUserNameModel.attributes.hasOwnProperty('emailSentTo')) {
			delete this.forgotUserNameModel.attributes.emailSentTo;
		}
		if(this.forgotUserNameModel.attributes.hasOwnProperty('key')) {
			delete this.forgotUserNameModel.attributes.key;
		}
		if(this.forgotUserNameModel.attributes.hasOwnProperty('value')) {
			delete this.forgotUserNameModel.attributes.value;
		}
	}
});
var registrationForgotUsernameDetailsBBView = new Registration_ForgotUsernameDetailsBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_RegistrationResultsBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#registrationSignUpResults"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	createLiteAccountModel : registrationEIDMIntegrationCreateLiteEIDMAccountBBModel,
	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	profileAlreadyExistsTemplate : _.template($('#profileAlreadyExistsTemplate').html()),
	profileCouldNotBeCreatedTemplate : _.template($('#profileCouldNotBeCreatedTemplate').html()),
	signUpSuccessTemplate : _.template($('#signUpSuccessTemplate').html()),
	profileCouldNotCreateAccountTemplate : _.template($('#profileCouldNotCreateAccountTemplate').html()),
	registrationAlmostFinishedTemplate : _.template($('#registrationAlmostFinishedTemplate').html()),
	waitingTemplate : _.template($('#registrationWaitingTemplate').html()),
	userIDAlreadyExistsTemplate : _.template($('#userIDAlreadyExistsTemplate').html()),
	combinationNotUniqueTemplate : _.template($('#combinationNotUniqueTemplate').html()),
	securityQuestionsInvalidFormatTemplate : _.template($('#securityQuestionsInvalidFormatTemplate').html()),
	securityQuestionsDuplicateTemplate : _.template($('#securityQuestionsDuplicateTemplate').html()),
	mlErrorTemplate : _.template($('#mlErrorTemplate').html()),
	govDeliveryErrorTemplate : _.template($('#govDeliveryErrorTemplate').html()),
	
	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'profileAlreadyExists', 'profileCouldNotBeCreated', 'waitingToCreate',
					'gobackToSignUp', 'signUpSuccess','almostFinished', 'toLandingPage', 'goBackToLogIn', 'couldNotCreateAccountGeneric',
					'userIDAlreadyExists', 'combinationNotUnique', 'securityQuestionsInvalidFormat', 'securityQuestionsDuplicate', 'forgotPassword',
					'forgotUsername', 'mlError250', 'mlError950', 'govDeliveryError');
					
		this.model.bind('profileAlreadyExists', this.profileAlreadyExists);
		this.model.bind('profileCouldNotBeCreated', this.profileCouldNotBeCreated);
		this.model.bind('signUpSuccess', this.signUpSuccess);
		this.model.bind('almostFinished', this.almostFinished);
		this.model.bind('couldNotCreateAccountGeneric', this.couldNotCreateAccountGeneric);
		this.model.bind('waitingToCreate',this.waitingToCreate);
		this.model.bind('userIDAlreadyExists',this.userIDAlreadyExists);
		this.model.bind('combinationNotUnique',this.combinationNotUnique);
		this.model.bind('securityQuestionsInvalidFormat',this.securityQuestionsInvalidFormat);
		this.model.bind('securityQuestionsDuplicate',this.securityQuestionsDuplicate);
		this.model.bind('govDeliveryError',this.govDeliveryError);
		this.model.bind('mlError250',this.mlError250);
		this.model.bind('mlError950',this.mlError950);
		
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click .modal-next" : "toLandingPage",
		"click .gobackToSignUp" : "gobackToSignUp",
		"click .forgotUsername" : "forgotUsername",
		"click .forgotPassword" : "forgotPassword",
		"click .goBackToLogIn" : "goBackToLogIn"
	},
	
	render : function() {
		var urls,
			$this = this;
        var trackingCode = "IA-RG-Almost";

		urls = getUrlVarsFromRout();
		setTimeout(function() {
			if(!isEmpty(urls[0])) {
				if(urls[0] === 'registrationSignUpResults') {
					switch (urls[1]) {
						case 'waiting': //Almost there
							$this.waitingToCreate();
							break;
						case '200':  //Almost there
							remoteTracker.track(trackingCode, {"success":"success"});
							$this.almostFinished();
							break;
						case '204': //couldnt be created at this time
							remoteTracker.track(trackingCode, {"success":"failure", "error": "204: Account could not be created at this time"});
							$this.couldNotCreateAccountGeneric();
							break;
						case 'E110': //User ID already exists
							remoteTracker.track(trackingCode, {"success":"failure", "error": "E110: User ID already exists"});
							$this.userIDAlreadyExists();
							break;
						case 'E537': //Combination of First Name, Last Name, and Email Address is not Unique
							remoteTracker.track(trackingCode, {"success":"failure", "error": "E537: Combination of first name, last name, and email address is not unique"});
							$this.combinationNotUnique();
							break;
						case 'E138': //Answers to challenge questions (format)
							remoteTracker.track(trackingCode, {"success":"failure", "error": "E138: Bad format for answers to challenge questions"});
							$this.securityQuestionsInvalidFormat();
							break;
						case 'E114': //Two or more answers to the challenge questions that you have provided are the same
							remoteTracker.track(trackingCode, {"success":"failure", "error": "E114: Two or more answers are the same"});
							$this.securityQuestionsDuplicate();
							break;
						case 'E117': //couldnt be created at this time
							remoteTracker.track(trackingCode, {"success":"failure", "error": "E117: Account could not be created at this time"});
							$this.profileCouldNotBeCreated();
							break;
						case '250': //Exception in createSystemUser data service
							remoteTracker.track(trackingCode, {"success":"failure", "error": "250: Exception in createSystemUser data service"});
							$this.mlError250();
							break;
						case '950': //Exception in createSystemUser business service
							remoteTracker.track(trackingCode, {"success":"failure", "error": "950: Exception in createSystemUser business service"});
							$this.mlError950();
							break;
						case '990': //Exception in email delivery
							remoteTracker.track(trackingCode, {"success":"failure", "error": "990: Exception in email delivery"});
							$this.govDeliveryError();
							break;
						case '500': //Please wait a few moments and try again + updated to have sec questions text
						case '': //couldnt be created at this time
						default:
							remoteTracker.track(trackingCode, {"success":"failure", "error": "Empty error code: Unknown error"});
							$this.profileCouldNotBeCreated();
							break;
					}
				}
			}
		}, 250);
	},

	profileAlreadyExists : function() {
		//when service is done this will be moved to the registration results
		document.title = this.resources['ffe.ee.myAccount.registration.accountAlreadyExists.pageTitle'];
		router.navigate("registrationSignUpResults", {trigger: true});
		this.$el.empty();
		this.$el.append(this.profileAlreadyExistsTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	signUpSuccess : function() { 
		document.title = this.resources['ffe.ee.myAccount.registration.SignUpSuccess.pageTitle'];
		router.navigate("registrationSignUpResults", {trigger: true});
		this.$el.empty();
		this.$el.append(this.signUpSuccessTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	almostFinished : function() {
		document.title = this.resources['ffe.ee.myAccount.registration.almostThere.pageTitle'];
		router.navigate("registrationSignUpResults:200", {trigger: true});
		var email = this.createLiteAccountModel.get('email');
		this.$el.empty();
		this.$el.append(this.registrationAlmostFinishedTemplate({
			"email" : email
		}));
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	waitingToCreate : function() {
		router.navigate("registrationSignUpResults:waiting", {trigger: true});
		this.$el.empty();
		this.$el.append(this.waitingTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	profileCouldNotBeCreated : function() {
		//if profile could not created
		document.title = this.resources['ffe.ee.myAccount.registration.accountNotCreated.pageTitle'];
		router.navigate("registrationSignUpResults:204", {trigger: true});
		var email = this.createLiteAccountModel.get('email');
		this.$el.empty();
		this.$el.append(this.profileCouldNotBeCreatedTemplate({
			"email" : email
		}));
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	couldNotCreateAccountGeneric : function() {
		//if profile could not created
		router.navigate("registrationSignUpResults:500", {trigger: true});
		this.$el.html(this.profileCouldNotBeCreatedTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	userIDAlreadyExists : function() {
		router.navigate("registrationSignUpResults:E110", {trigger: true});
		this.$el.empty();
		this.$el.append(this.userIDAlreadyExistsTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	combinationNotUnique : function() {
		router.navigate("registrationSignUpResults:E537", {trigger: true});
		this.$el.empty();
		this.$el.append(this.combinationNotUniqueTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	securityQuestionsInvalidFormat : function() {
		router.navigate("registrationSignUpResults:E138", {trigger: true});
		this.$el.empty();
		this.$el.append(this.securityQuestionsInvalidFormatTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	securityQuestionsDuplicate : function() {
		router.navigate("registrationSignUpResults:E114", {trigger: true});
		this.$el.empty();
		this.$el.append(this.securityQuestionsDuplicateTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	mlError250 : function() {
		router.navigate("registrationSignUpResults:250", {trigger: true});
		this.$el.empty();
		this.$el.append(this.mlErrorTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	mlError950 : function() {
		router.navigate("registrationSignUpResults:950", {trigger: true});
		this.$el.empty();
		this.$el.append(this.mlErrorTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	govDeliveryError : function() {
		router.navigate("registrationSignUpResults:990", {trigger: true});
		this.$el.empty();
		this.$el.append(this.govDeliveryErrorTemplate());
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
		$(document).scrollTop(0);
	},
	
	gobackToSignUp : function() {
		router.navigate("signUpStepOne", {trigger: true});
		this.model.trigger('signUpStepOne');
		$('h2[tabindex=-1]').removeAttr('tabindex');
	},
	
	goBackToLogIn : function() {
		router.navigate("logIn", {trigger: true});
		this.model.trigger('refreshLogInTemplates');
		$('h2[tabindex=-1]').removeAttr('tabindex');
	},

	forgotPassword : function() {
		router.navigate("forgotPassword", {trigger: true});
		this.model.trigger('refreshForgotPasswordTemplates');
		$('h2[tabindex=-1]').removeAttr('tabindex');
	},

	forgotUsername : function() {
		router.navigate("forgotUsername", {trigger: true});
		this.model.trigger('refreshForgotUsername');
		$('h2[tabindex=-1]').removeAttr('tabindex');
	},
	
	toLandingPage : function() {
		window.location.href = "/"+eePath+"/auth/"+tenantId+"/"+locale+"/myProfile#landingPage";
	}
});
var registrationRegistrationResultsBBView = new Registration_RegistrationResultsBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_LoginTermsAndConditionsBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#logInTermsAndConditionsPage"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,

	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	termsAndConditionsTemplate : _.template($('#logInTermsAndConditionsTemplate').html()),
	//logInSignUpTemplate : _.template($('#logInSignUpTemplate').html()),

	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate', 'goToSignUp');
		
		this.model.bind('refreshLogInTermsAndConditionsTemplates', this.refreshTemplate);
		
		// Custom validation handlers could be added here

		// Initialize generally completes by calling this.render
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click #termsAndConditionsSignupButton" : "goToSignUp"
	},
	
	render : function() {
		this.refreshTemplate();	
		
	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.$el.empty();
		this.$el.append(this.termsAndConditionsTemplate());
		
		//$("#logInSignUpContent").empty();
		
		/*$("#logInSignUpContent").append(this.logInSignUpTemplate({
			h1Heading : "My Account Registration - Log In Terms &amp; Conditions",
			signUpText : "New to HealthCare.gov?",
			buttonText : "Sign Up"
		}));*/
	},
	
	goToSignUp : function(){
		this.model.trigger("signUpStepOne");
		router.navigate("signUpStepOne", {trigger: true});	
	}
});
var registrationLoginTermsAndConditionsBBView = new Registration_LoginTermsAndConditionsBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_ForgotUsernameResultsBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#forgotUsernameResultsPage"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	forgotUserNameModel : registrationEIDMIntegrationUpdateForgottenUserNameBBModel,

	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	forgotUsernameResultConfirmationTemplate : _.template($('#forgotUsernameResultConfirmationTemplate').html()),
	forgotUsernameResultUnsuccessfulTemplate : _.template($('#forgotUsernameResultUnsuccessfulTemplate').html()),
	forgotUsernameCouldNotProsessRequestTemplate : _.template($('#forgotUsernameCouldNotProsessRequestTemplate').html()),
	forgotPasswordUsernameEmailTemplate : _.template($('#forgotPasswordUsernameEmailTemplate').html()),
	forgotUsernameResultUnsuccessfulTimeoutTemplate : _.template($('#forgotUsernameResultUnsuccessfulTimeoutTemplate').html()),
	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate', 'renderResutlsFromUrl', 'forgotUsernameResultConfirmation',
				'forgotUsernameResultUnsuccessful', 'goBackToLogIn', 'usernameCouldNotProsessRequest', 'backToForgotUsername', 
				'forgotUsernameEmail', 'forgotUsernameEmailT100');
		
		this.model.bind('forgotUsernameResultConfirmation', this.forgotUsernameResultConfirmation);
		this.model.bind('forgotUsernameResultUnsuccessful', this.forgotUsernameResultUnsuccessful);
		this.model.bind('forgotUsernameCouldNotProsessRequest', this.usernameCouldNotProsessRequest);
		this.model.bind('forgotUsernameEmail', this.forgotUsernameEmail);
		this.model.bind('forgotUsernameEmailT100', this.forgotUsernameEmailT100);
		// Custom validation handlers could be added here

		// Initialize generally completes by calling this.render
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click .returnLogin" : "goBackToLogIn",
		"click  #returnToForgotUsername" : "backToForgotUsername",
		"click .signUpButton" : "goToSignUp",
		"click .toResubmitLink" : "backToForgotUsername"
	},
	
	render : function() {
		this.refreshTemplate();
		
	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.renderResutlsFromUrl();
	},
	
	renderResutlsFromUrl : function() {
		var urls,
			$this = this;
		
		urls = getUrlVarsFromRout();
		setTimeout(function() {
			if(!isEmpty(urls[0])) {
				if(urls[0] === 'forgotUsernameResults') {
					switch (urls[1]) {
						case 'usernameEmail': //email sent
							$this.forgotUsernameEmail();
							break;
						case 'T100': //Timeout
							$this.forgotUsernameEmailT100();
							break;
						default: //email sent
							$this.forgotUsernameEmail();
							break;	
					}
				}
			}
		}, 250);
	},
		
	goBackToLogIn : function() {
		this.model.trigger('refreshLogInTemplates');
		router.navigate("logIn", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
	},
	
	backToForgotUsername : function() {
		this.model.trigger("refreshForgotUsername");	
		router.navigate("forgotUsername", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	forgotUsernameEmail : function(){
		document.title = this.resources['ffe.ee.myAccount.registration.forgotUsernameResults.usernameEmail.pageTitle'];
		this.$el.empty();
		this.$el.append(this.forgotPasswordUsernameEmailTemplate({
			'emailScreenText' : this.resources['ffe.ee.registration.forgotUsernameResults.usernameEmailText'],
			'emailScreenText2' :'<a class="toResubmitLink" href="#">'+ this.resources['ffe.ee.registration.forgotUsernameResults.usernameEmailText1'] +
				this.resources['ffe.ee.registration.clickHereLink']+ " " + this.resources['ffe.ee.registration.resubmitText'] + '</a>',
			'hiddenText' : this.resources['ffe.ee.registration.forgotUsernameResults.usernameEmailHiddenText']
		}));
		router.navigate("forgotUsernameResults:usernameEmail", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	forgotUsernameEmailT100 : function() {
		document.title = this.resources['ffe.ee.myAccount.registration.forgotUsernameResults.usernameEmail.pageTitle'];
		this.$el.empty();
		this.$el.append(this.forgotUsernameResultUnsuccessfulTimeoutTemplate());
		router.navigate("forgotUsernameResults:T100", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	forgotUsernameResultConfirmation : function() {
		//when service is done this will be moved to the registration results
		this.$el.empty();
		this.$el.append(this.forgotUsernameResultConfirmationTemplate({
			'emailTo' : this.forgotUserNameModel.get('email')
		}));
		router.navigate("forgotUsernameResults", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	forgotUsernameResultUnsuccessful : function() {
		//if profile could not created
		this.$el.empty();
		this.$el.append(this.forgotUsernameResultUnsuccessfulTemplate());
		router.navigate("forgotUsernameResults", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	usernameCouldNotProsessRequest : function() {
		//if profile could not created
		document.title = this.resources['ffe.ee.myAccount.forgotUsernameResults.profileNotFound.pageTitle'];
		this.$el.empty();
		this.$el.append(this.forgotUsernameCouldNotProsessRequestTemplate());
		router.navigate("forgotUsernameResults", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	goToSignUp : function() {
		this.model.trigger("signUpStepOne");	
		router.navigate("signUpStepOne", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
	}
});
var registrationForgotUsernameResultsBBView = new Registration_ForgotUsernameResultsBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_ForgotPasswordChallengeQuestionBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#passwordChallengeQuestionsPage"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	forgottenPasswordQuestionsModel : registrationEIDMIntegrationForgottenPasswordQuestionsBBModel,
	
	
	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	challengeQuestionsTemplate : _.template($('#forgotPasswordChallengeQuestionsTemplate').html()),
	questionTemplate : _.template($('#forgotPasswordQuestionTemplate').html()),

	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate', 'backToForgotPassword', 'continueToReset',
				'goToSignUp', 'initializeValidation','writeSecurityQuestions');
		
		this.model.bind('refreshPasswordChallengeQuestionsTemplates', this.writeSecurityQuestions);
		
		// Custom validation handlers could be added here

		// Initialize generally completes by calling this.render
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click #challengeQuestionsBack" : "backToForgotPassword",
		"click #challengeQuestionsContinue" : "continueToReset",
		"click #challengeQuestionsSignUpButton" : "goToSignUp"
	},
	
	render : function() {
		this.refreshTemplate();	
	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.$el.empty();
		this.$el.append(this.challengeQuestionsTemplate());
		
		var vars =getUrlVars();
		
		if(!isEmpty(vars.uuid )) {
			var fauxThis = this;
			var uuid = vars.uuid; 
				
			$('#forgotPasswordUuid').val(uuid);
			
			document.title = this.resources['ffe.ee.myAccount.registration.SecurityQuestions.pageTitle'];
			
			blockUIForProfile();
			this.forgottenPasswordQuestionsModel.set({'uuid': uuid});
			this.forgottenPasswordQuestionsModel.save(null, {
				success : function(model, response) 
				{
					fauxThis.forgottenPasswordQuestionsModel.set({
						'securityQuestions' : secQuestionEncoding( fauxThis.forgottenPasswordQuestionsModel.get('securityQuestions'), locale )
					});
				
					$.unblockUI();
					fauxThis.model.trigger('refreshPasswordChallengeQuestionsTemplates');
					
				},
				error : function(model, response) {
					$.unblockUI();
					fauxThis.model.trigger('forgotPasswordCouldNotProcessUsernameTemplate');
				}
			});
		}
	},
	
	writeSecurityQuestions : function() {
		var questions = this.forgottenPasswordQuestionsModel.get('securityQuestions');
		
		$('#questionTemplateSection').empty();
		
		if(!isEmpty(questions)) {
			for(var x = 0; x < 3; x++) {
				$('#questionTemplateSection').append(this.questionTemplate({
					"question" : questions[x].question,
					"index" : x
				}));
			}
		}
		$('#logInPage').hide();
		$('#passwordChallengeQuestionsPage').show();
		this.initializeValidation();
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	initializeValidation : function() {
		var eventTrigger = $("#challengeQuestionsContinue"),
			formContainer = $("#forgotPasswordQuestionsContainer");
			
		if(formContainer.length > 0) {
			var challengeQuestionsValidator = new FFM.FormValidator(formContainer, eventTrigger);
			challengeQuestionsValidator.setRule("notBlank", ["^(?!\\s*$).+", this.resources['ffe.ee.shared.validations.notBlank']]);
		}
	},
	
	backToForgotPassword : function() {
		this.model.trigger("refreshForgotPasswordTemplates");	
		router.navigate("forgotPassword", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#forgotPasswordPage h2').attr('tabindex', '-1').focus();
	},
	
	continueToReset : function() {
		this.model.bind('refreshResetPasswordTemplates', this.refreshTemplate);
		router.navigate("resetPassword", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#resetPasswordPage h2').attr('tabindex', '-1').focus();
	},
	
	goToSignUp : function() {
		this.model.trigger("signUpStepOne");
		router.navigate("signUpStepOne", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#registrationSignUpOne h2').attr('tabindex', '-1').focus();
	}
});
var registrationForgotPasswordChallengeQuestionBBView = new Registration_ForgotPasswordChallengeQuestionBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_ForgotPasswordResultsBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#forgotPasswordResultsPage"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	forgottenPasswordConfirmModel : registrationEIDMIntegrationForgottenPasswordConfirmBBModel,

	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	resultSuccessTemplate : _.template($('#forgotPasswordResultSuccessTemplate').html()),
	resultNotFoundTemplate : _.template($('#forgotPasswordResultNotFoundTemplate').html()),
	resultIncorrectTemplate : _.template($('#forgotPasswordResultIncorrectTemplate').html()),
	forgotPasswordCouldNotProcessRequestTemplate : _.template($('#forgotPasswordCouldNotProcessRequestTemplate').html()),
	forgotPasswordCouldNotProcessUsernameTemplate : _.template($('#forgotPasswordCouldNotProcessUsernameTemplate').html()),
	forgotPasswordUsernameEmailTemplate : _.template($('#forgotPasswordUsernameEmailTemplate').html()),
	forgotPasswordQuestionsAndAnswersDoNotMatchTemplate : _.template($('#forgotPasswordQuestionsAndAnswersDoNotMatchTemplate').html()),
	forgotPasswordAnswersDoNotMatchTemplate : _.template($('#forgotPasswordAnswersDoNotMatchTemplate').html()),
	forgotPasswordInvalidPasswordTemplate : _.template($('#forgotPasswordInvalidPasswordTemplate').html()),
	forgotPasswordPasswordsDoNotMatchTemplate : _.template($('#forgotPasswordPasswordsDoNotMatchTemplate').html()),
	forgotPasswordUserIDisInvalidTemplate : _.template($('#forgotPasswordUserIDisInvalidTemplate').html()),
	forgotPasswordResultTimoutTemplate : _.template($('#forgotPasswordResultTimoutTemplate').html()),
	
	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate', 'renderResutlsFromUrl', 'returnToLogin', 'goToSignUp',
				'returnToForgotPassword','passwordNotFound','resultUnsuccessful','resultSuccessful',
				'passwordCouldNotProcessRequest','passwordCouldNotProcessUsername','forgotPasswordEmail',
				'questionsAndAnswersDoNotMatch', 'questionsDontMatch', 'passwordsDoNotMatch', 'userIDisInvalid',
				'passwordInvalid');
		
		this.model.bind('refreshForgotPasswordResultsTemplates', this.refreshTemplate);
		this.model.bind('resultSuccessful', this.resultSuccessful);
		this.model.bind('resultUnsuccessful', this.resultUnsuccessful);
		this.model.bind('passwordNotFound', this.passwordNotFound);
		this.model.bind('forgotPasswordCouldNotProcessRequestTemplate', this.passwordCouldNotProcessRequest);
		this.model.bind('forgotPasswordCouldNotProcessUsernameTemplate', this.passwordCouldNotProcessUsername);
		this.model.bind('forgotPasswordEmail', this.forgotPasswordEmail);
		this.model.bind('questionsAndAnswersDoNotMatch', this.questionsAndAnswersDoNotMatch);
		this.model.bind('questionsDontMatch', this.questionsDontMatch);
		this.model.bind('passwordInvalid', this.passwordInvalid);
		this.model.bind('passwordsDoNotMatch', this.passwordsDoNotMatch);
		this.model.bind('userIDisInvalid', this.userIDisInvalid);
		this.model.bind('resultUnsuccessfulT100', this.resultUnsuccessfulT100);
		// Custom validation handlers could be added here

		// Initialize generally completes by calling this.render
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click .returnLogin" : "returnToLogin",
		"click .retryForgotPasswordLink" : "returnToForgotPassword",
		"click .signUpButton" : "goToSignUp",
		"click .toResubmitLink" : "returnToForgotPassword"
	},
	
	render : function() {
		this.refreshTemplate();	
		
	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.renderResutlsFromUrl();
	},
	
	renderResutlsFromUrl : function() {
		var urls,
			$this = this;
		
		urls = getUrlVarsFromRout();
		setTimeout(function() {
			if(!isEmpty(urls[0])) {
				if(urls[0] === 'forgotPasswordResults') {
					switch (urls[1]) {
						case 'forgotPasswordEmail': //email sent
							$this.resultSuccessful();
							break;
						case 'username': //email sent
							$this.passwordCouldNotProcessUsername();
							break;
						case '200': //Your password was reset
							$this.resultSuccessful();
							break;
						case 'E514': //User ID Invalid
							$this.userIDisInvalid();
							break;
						case 'E513': //Challenge Questions and Answers do not match
							$this.questionsAndAnswersDoNotMatch();
							break;
						case 'E521': //Challenge Questions
							$this.questionsDontMatch();
							break;
						case 'E128': //Password invalid format
							$this.passwordInvalid();
							break;
						case 'E111': //Password does not match the confirm password
							$this.passwordsDoNotMatch();
							break;
						case '204': //couldn't find a matched
							$this.passwordCouldNotProcessRequest();
							break;
						case 'T100': //couldn't find a matched
							$this.resultUnsuccessfulT100();
							break;
						case '': //couldn't find a matched
							$this.passwordCouldNotProcessRequest();
							break;
						default: //couldn't find a matched
							$this.passwordCouldNotProcessRequest();
							break;
					}
				}
			}
		}, 250);
	},
	
	forgotPasswordEmail : function(){
		document.title = this.resources['ffe.ee.myAccount.registration.forgotPassword.emailPassword.pageTitle'];
		router.navigate("forgotPasswordResults:passwordEmail", {trigger: true});
		this.$el.empty();
		this.$el.append(this.forgotPasswordUsernameEmailTemplate({
			'emailScreenText' : this.resources['ffe.ee.registration.forgotPassword.emailPasswordText1'],
			'emailScreenText2' : '',
			'hiddenText' : this.resources['ffe.ee.registration.forgotPassword.emailPasswordHiddenText']
		}));
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	returnToLogin : function() {
		router.navigate("logIn", {trigger: true});
		this.model.trigger("refreshLogInTemplates");
		$('h2[tabindex=-1]').removeAttr('tabindex');
	},
	
	returnToForgotPassword : function() {
		router.navigate("forgotPassword", {trigger: true});
		this.model.trigger("refreshForgotPasswordTemplates");
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#forgotPasswordPage h2').attr('tabindex', '-1').focus();
	},
	
	goToSignUp : function() {
		this.model.trigger("signUpStepOne");	
		router.navigate("signUpStepOne", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		$('#registrationSignUpOne h2').attr('tabindex', '-1').focus();
	},
	
	resultUnsuccessful : function() {
		//when service is done this will be moved to the registration results 
		document.title = this.resources['ffe.ee.myAccount.registration.ForgotPassword.PasswordReset.Unsuccessful.pageTitle'];
		this.$el.empty();
		this.$el.append(this.resultIncorrectTemplate());
		router.navigate("forgotPasswordResults", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	resultUnsuccessfulT100 : function() {
		//when service is done this will be moved to the registration results 
		document.title = this.resources['ffe.ee.myAccount.registration.ForgotPassword.PasswordReset.Unsuccessful.pageTitle'];
		this.$el.empty();
		this.$el.append(this.forgotPasswordResultTimoutTemplate());
		router.navigate("forgotPasswordResults:T100", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	resultSuccessful : function() { 
		document.title = this.resources['ffe.ee.myAccount.registration.ForgotPassword.Confirmation.pageTitle'];
		var email = this.forgottenPasswordConfirmModel.get('email');
		this.$el.empty();
		this.$el.append(this.resultSuccessTemplate({
			"email" : email
		}));
		router.navigate("forgotPasswordResults:200", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	passwordNotFound : function() {
		//if profile could not created 
		document.title = this.resources['ffe.ee.myAccount.registration.passwordNotFound.pageTitle'];
		this.$el.empty();
		this.$el.append(this.resultNotFoundTemplate());
		router.navigate("forgotPasswordResults", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	passwordCouldNotProcessRequest : function() {
		//if profile could not created
		document.title = this.resources['ffe.ee.myAccount.forgotPassword.profileNotFound.pageTitle'];
		this.$el.empty();
		this.$el.append(this.forgotPasswordCouldNotProcessRequestTemplate());
		router.navigate("forgotPasswordResults:204", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	passwordCouldNotProcessUsername : function() {
		//if profile could not created
		this.$el.empty();
		this.$el.append(this.forgotPasswordCouldNotProcessUsernameTemplate());
		router.navigate("forgotPasswordResults:username", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	questionsAndAnswersDoNotMatch : function() {
		this.$el.empty();
		this.$el.append(this.forgotPasswordQuestionsAndAnswersDoNotMatchTemplate());
		router.navigate("forgotPasswordResults:E513", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	questionsDontMatch : function() {
		this.$el.empty();
		this.$el.append(this.forgotPasswordAnswersDoNotMatchTemplate());
		router.navigate("forgotPasswordResults:E521", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	passwordInvalid : function() {
		this.$el.empty();
		this.$el.append(this.forgotPasswordInvalidPasswordTemplate());
		router.navigate("forgotPasswordResults:E128", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	passwordsDoNotMatch : function() {
		this.$el.empty();
		this.$el.append(this.forgotPasswordPasswordsDoNotMatchTemplate());
		router.navigate("forgotPasswordResults:E111", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	},
	
	userIDisInvalid : function() {
		this.$el.empty();
		this.$el.append(this.forgotPasswordUserIDisInvalidTemplate());
		router.navigate("forgotPasswordResults:E514", {trigger: true});
		$('h2[tabindex=-1]').removeAttr('tabindex');
		this.$el.find('h2').attr('tabindex', '-1').focus();
	}
});
var registrationForgotPasswordResultsBBView = new Registration_ForgotPasswordResultsBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_ResetPasswordBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#resetPasswordPage"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	forgottenPasswordQuestionsModel : registrationEIDMIntegrationForgottenPasswordQuestionsBBModel,
	forgottenPasswordConfirmModel : registrationEIDMIntegrationForgottenPasswordConfirmBBModel,


	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	resetPasswordTemplate : _.template($('#resetPasswordTemplate').html()),
	//logInSignUpTemplate : _.template($('#logInSignUpTemplate').html()),

	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate', 'returnToChallengeQuestions',
				'goToSignUp','updateForgotPassword','setUpdateModelInfo', 'handleResponse');
		
		this.model.bind('refreshResetPasswordTemplates', this.refreshTemplate);
		
		// Custom validation handlers could be added here

		// Initialize generally completes by calling this.render
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click #resetPasswordBack" : "returnToChallengeQuestions",
		"click #resetLoginInSignUpButton" : "goToSignUp",
		"click #resetPasswordReset" : "updateForgotPassword"
	},
	
	render : function() {
		this.refreshTemplate();	
		
	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.$el.empty();
		this.$el.append(this.resetPasswordTemplate());
		this.initializeValidation();
	},
	
	initializeValidation : function() {
		var eventTrigger = $("#resetPasswordReset"),
			formContainer = $("#resetPasswordContainer");
			
		if(formContainer.length > 0) {
			FFM.FormValidator.currentLocale = locale;
			var resetPasswordValidator = new FFM.FormValidator(formContainer, eventTrigger);
		}
	},
	
	returnToChallengeQuestions : function() {
		this.model.trigger("refreshPasswordChallengeQuestionsTemplates");	
		router.navigate("forgotPasswordQuestions", {trigger: true});
	},
	
	goToSignUp : function(){
		this.model.trigger("signUpStepOne");
		router.navigate("signUpStepOne", {trigger: true});	
	},
	
	updateForgotPassword : function() {
		var $this = this,
			theResponse;
			
		blockUIForProfile();
		this.setUpdateModelInfo();
		var uuid = $.trim($('#forgotPasswordUuid').val());
		if(!isEmpty(uuid)){
			$this.forgottenPasswordConfirmModel.set({"emailConfirmationId" : uuid});
			$this.forgottenPasswordConfirmModel.save(null, {
				success : function(model, response) {
					$.unblockUI();
					$this.handleResponse(response);
				},
				error : function(model, response) {
					console.log("Service failure");
					$.unblockUI();
					try {
						theResponse = $.parseJSON(response.responseText);
						$this.handleResponse(theResponse);
					}
					catch(e) {
						$this.model.trigger('forgotPasswordCouldNotProcessRequestTemplate');
					}
				}
			});
		}
	},
	
	handleResponse : function( response ) {
		response.errors[0].errorType = response.errors[0].errorType.toUpperCase();
		console.log(response.errors[0].errorType);
		switch (response.errors[0].errorType) {
			case '200': //Your password was reset
				this.forgottenPasswordConfirmModel.set({'email' : response.email});
				this.model.trigger('resultSuccessful');
				break;
			case 'E514': //User ID Invalid
				this.model.trigger('userIDisInvalid');
				break;
			case 'E513': //Challenge Questions and Answers do not match
				this.model.trigger('questionsAndAnswersDoNotMatch');
				break;
			case 'E521': //Challenge Questions
				this.model.trigger('questionsDontMatch');
				break;
			case 'E128': //Password invalid format
				this.model.trigger('passwordInvalid');
				break;
			case 'E111': //Password does not match the confirm password
				this.model.trigger('passwordsDoNotMatch');
				break;
			case '204': //couldn't find a matched
				this.model.trigger('forgotPasswordCouldNotProcessRequestTemplate');
				break;
			case 'T100': //Timeout
				this.model.trigger('resultUnsuccessfulT100');
				break;
			default: //couldn't find a matched
				this.model.trigger('forgotPasswordCouldNotProcessRequestTemplate');
				break;		
		}
	},
	
	setUpdateModelInfo : function () {
		this.forgottenPasswordConfirmModel.set({'securityQuestions' : []});
		
		var questionsFromFetch = this.forgottenPasswordQuestionsModel.get('securityQuestions');
		var questions = this.forgottenPasswordConfirmModel.get('securityQuestions');
		
		if(!isEmpty(questionsFromFetch)) {
			for(var i = 0; i < 3; i++) {
				questions.push(newEIDMSecurityQuestion());
							
				questions[i].question = questionsFromFetch[i].question;
				questions[i].answer = $.trim($('#forgotPasswordSecurityQAnswer'+i).val());
				questions[i].index = i;
			}
		}
		
		this.forgottenPasswordConfirmModel.set({'password' : $.trim($('#resetPasswordNewPassword').val())});
		this.forgottenPasswordConfirmModel.set({"securityQuestions" : questions});
		
		if(this.forgottenPasswordConfirmModel.attributes.hasOwnProperty('errors')) {
			delete this.forgottenPasswordConfirmModel.attributes.errors;
		}
	}
});
var registrationResetPasswordBBView = new Registration_ResetPasswordBBView();
//
// Attention: This file is generated once and can be modified by hand
// Generated by: pageBBview.js.vsl in andromda-backbone-js-ui cartridge.
// registration
// gov.hhs.cms.ffe.ee.web.registration
// web
//
var Registration_ExpiredPasswordBBView = FFEView.extend({
	// The el property is the root element of the view.
	// You can only bind to events fired in this element or its children.
	el : $("#expiredPasswordPage"),

	// The "model" attribute is the one that the model binding library uses
	model : registrationRegistrationBBModel,
	updateExpiredPasswordModel : registrationEIDMIntegrationUpdateExpiredPasswordBBModel,

	// Underscore.js template variables points to the template in the XHTML
	// file. There can be more than one template.
	expiredPasswordTemplate : _.template($('#expiredPasswordTemplate').html()),

	// Namespace is used for looking up keys in the resource bundle
	namespace : "ffe.ee",
	
	// Page name is used for looking up keys in the resource bundle
	pageName : "registration",
	
	// Variable through which the view can access the resource bundle. 
	resources : resources,

	// Initialize is always called first when the prototype constructor ("new")
	// is called
	initialize : function() {
		FFEView.prototype.initialize.call(this);
		
		// Generally all methods in the view will require a reference to the
		// "this" context. The Underscore.js bindAll method fixes loss of 
		// context in the bound methods
		_.bindAll(this, 'render', 'refreshTemplate', 'updatePassword','goToSignUp',
				'setUpdateModelInfo');
				
		this.model.bind('refreshExpiredPasswordTemplates', this.refreshTemplate);
		
		// Custom validation handlers could be added here

		// Initialize generally completes by calling this.render
		this.render();
	},

	// The events object links all UI events in this view with their event
	// handlers
	events : {
		"click #passwordExpiredSignUpButton" : "goToSignUp",
		"click #expiredPasswordContinue" : "updatePassword"
	},
	
	render : function() {
		this.refreshTemplate();	
	},
	
	refreshTemplate : function() {
		// Empties a jQuery element and refills it with the populated
		// Underscore.js template
		this.$el.empty();
		this.$el.append(this.expiredPasswordTemplate());
	},
	
	goToSignUp : function(){
		this.model.trigger("signUpStepOne");	
		router.navigate("signUpStepOne", {trigger: true});		
	},

	updatePassword : function() {
		var $this = this;
		this.setUpdateModelInfo();
		var username = ffeUserName;
		if(!isEmpty(username)) {
			$this.updateExpiredPasswordModel.url =environment+"/ee-rest/ffe/" +locale +"/MyAccountEIDMUnsecuredIntegration/updateExpiredPassword/"+username;
			$this.updateExpiredPasswordModel.set({"userName" : username});
			$this.updateExpiredPasswordModel.save(null, {
				success : function(model, response) {
					$this.model.trigger('resultSuccessful');
				},
				error : function(model, response) {
					$this.model.trigger('resultUnsuccessful');
				}
			});
		}
	},
	setUpdateModelInfo : function () {
		this.updateExpiredPasswordModel.set({'oldPassword' : $.trim($('#expiredPasswordOldPassword').val())});
		this.updateExpiredPasswordModel.set({'newPassword' : $.trim($('#expiredPasswordNewPassword').val())});
	}
});
